{"version":3,"sources":["components/Head.js","components/Loading.js","App.js","serviceWorker.js","index.js","components/Button.js","models/index.js","store/user.js","store/history.js","store/image.js","store/auth.js","store/index.js"],"names":["Nav","styled","div","Head","observer","useStores","UserStore","AuthStore","history","useHistory","refHome","useRef","refHistory","selectedTab","ifSelected","current","toggle","e","target","className","to","ref","onClick","currentUser","attributes","username","Button","logout","push","Loading","Home","lazy","History","Login","Register","App","fallback","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","button","AV","init","appId","appKey","serverURL","Auth","password","user","User","setUsername","setPassword","Promise","resolve","reject","signUp","loginUser","logIn","logOut","Uploader","file","fileName","item","Object","avFile","File","set","save","serverFile","page","limit","query","Query","include","skip","descending","equalTo","find","results","this","observable","action","newList","list","concat","isLoading","append","length","hasMore","finally","isUploading","log","isLogin","values","success","pullUser","resetUser","HistoryStore","reset","ImageStore","context","createContext","useContext"],"mappings":"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","file":"static/js/main.3285811a.chunk.js","sourcesContent":["import React, {useRef} from \"react\"\r\nimport {Link,useHistory } from 'react-router-dom'\r\nimport styled from \"styled-components\"\r\nimport Button from \"./Button\"\r\nimport useStores from \"../store\"\r\nimport {observer} from \"mobx-react\"\r\nconst Nav=styled.div`\r\nmin-height: 52px;\r\nbackground-color: #000;\r\ncolor: #fff;\r\ndisplay: flex;\r\nalign-items: center;\r\njustify-content: space-between;\r\npadding: 0 80px;\r\n.linkWrapper{\r\nwidth: 110px;\r\ndisplay: flex;\r\njustify-content: space-between;\r\n.selected{\r\n\r\n}\r\na:active{\r\ncolor: dodgerblue;\r\n}\r\n}\r\n.btnWrapper{\r\nwidth: 180px;\r\ndisplay: flex;\r\njustify-content: space-between;\r\nalign-items: center;\r\n}\r\n`;\r\n\r\nconst Head=observer(()=> {\r\n    const{UserStore,AuthStore}= useStores()\r\n    const history= useHistory()\r\n    const handleLogout=()=>{\r\n        AuthStore.logout()\r\n    }\r\n    const handleLogin=()=>{\r\n    history.push('/login')\r\n    }\r\n    const handleRegister=()=>{\r\n        history.push('/register')\r\n    }\r\n    const refHome=useRef(null)\r\n    const refHistory=useRef(null)\r\n\r\n    let  selectedTab=refHome;\r\n    const ifSelected=(current)=>{\r\n        if( selectedTab===current) {\r\n            return\"selected\"\r\n        }\r\n    }\r\n    const toggle=(e)=>{\r\n        selectedTab=e.target\r\n    }\r\nreturn(\r\n    <Nav>\r\n        <div className='linkWrapper'>\r\n        <Link to='/' ref={refHome} onClick={toggle} className={ifSelected(refHome)}>首页</Link>\r\n        <Link to='/history'\r\n              ref={refHistory}\r\n              onClick={toggle}\r\n              className={ifSelected(refHistory)}\r\n        >上传历史</Link>\r\n        </div>\r\n        {\r\n            (UserStore && UserStore.currentUser) ?\r\n                <div className='btnWrapper'>\r\n                    <span>hello , {UserStore.currentUser.attributes.username} !</span>\r\n                    <Button onClick={handleLogout}>注销</Button>\r\n                </div>:\r\n                <div className='btnWrapper'>\r\n                  <Button onClick={handleLogin}>登录</Button>\r\n                  <Button onClick={handleRegister}>注册</Button>\r\n              </div>\r\n        }\r\n\r\n        \r\n    </Nav>\r\n)\r\n})\r\nexport default Head","import React from \"react\"\r\n\r\n function Loading() {\r\nreturn(\r\n    <div>\r\n        loading\r\n    </div>\r\n)\r\n}\r\nexport default Loading","import React ,{ Suspense,lazy}from 'react';\nimport './App.css';\nimport {Switch,Route,} from'react-router-dom'\nimport Head from \"./components/Head\"\nimport Loading from \"./components/Loading\"\n\nconst Home = lazy(()=>import(\"./view/Home\"));\nconst History =lazy(() =>import( \"./view/History\"))\nconst Login=lazy(()=>import(\"./view/Login\"))\nconst Register=lazy(()=>import( \"./view/Register\"))\nfunction App() {\n  return (\n    <div className=\"app\">\n        <Head/>\n        <Suspense fallback={<Loading/>}>\n        <Switch>\n            <Route path='/' exact>\n                <Home/>\n            </Route>\n            <Route path='/history' component={History} />\n            <Route path='/login' component={Login} />\n            <Route path='/register' component={Register} />\n        </Switch>\n        </Suspense>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {HashRouter as Router} from 'react-router-dom'\nimport 'antd/dist/antd.css';\nReactDOM.render(\n  <React.StrictMode>\n      <Router>\n    <App />\n      </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nserviceWorker.unregister();\n","import styled from \"styled-components\"\r\n\r\nconst Button=styled.button`\r\nmin-width: 80px;\r\n    padding: 8px 24px;\r\n    background-color: dodgerblue;\r\n    color: #fff;\r\n    border: none;\r\n    border-radius: 4px;\r\n`;\r\nexport  default Button","import AV, { User} from 'leancloud-storage';\r\n\r\nAV.init({\r\n    appId: \"T9DjYIQTHtdtIRxse73sxGKc-gzGzoHsz\",\r\n    appKey: \"7LX0NQpt54wRwqScQl7snAgf\",\r\n    serverURL: \"https://t9djyiqt.lc-cn-n1-shared.com\"\r\n});\r\n\r\nconst Auth = {\r\n    register(username, password) {\r\n        let user = new User();\r\n        user.setUsername(username)\r\n        user.setPassword(password)\r\n        return new Promise((resolve, reject) => {\r\n            user.signUp().then(loginUser=>resolve(loginUser), error => {reject(error)}\r\n            )\r\n        })\r\n    },\r\n\r\n    login(username,password){\r\n        return new Promise((resolve,reject)=>{\r\n           User.logIn(username,password).then(\r\n                loginUser=>resolve(loginUser),\r\n                error=>reject(error)\r\n            )\r\n        })\r\n    },\r\n    logout(){\r\n        User.logOut()\r\n    },\r\n    getCurrentUser(){\r\n        return User.current()\r\n    }\r\n}\r\nconst Uploader= {\r\n    add(file, fileName) {\r\n        const item = new AV.Object('Image')\r\n        const avFile = new AV.File(fileName, file)\r\n        item.set('fileName', fileName)\r\n        item.set('owner', AV.User.current())\r\n        item.set('url', avFile)\r\n        return new Promise((resolve, reject) => {\r\n            item.save().then(\r\n                serverFile => {\r\n                    resolve(serverFile)\r\n                },\r\n                error => {\r\n                    reject(error)\r\n                }\r\n            )\r\n        })\r\n    },\r\n    find(page=0,limit=10) {\r\n        const query = new AV.Query('Image')\r\n        query.include('owner')\r\n        query.limit(limit)\r\n        query.skip(page*limit)\r\n        query.descending('createdAt')\r\n        query.equalTo('owner', AV.User.current())\r\n        return new Promise((resolve, reject) => {\r\n            query.find()\r\n                .then((results => resolve(results)))\r\n                .catch(error => reject(error))\r\n        })\r\n    }\r\n}\r\n\r\nexport {Auth,Uploader}\r\n\r\n","\r\nimport {observable,action} from \"mobx\"\r\nimport {Auth} from \"../models\"\r\n\r\nclass UserStore{\r\n    @observable  currentUser = null\r\n    @action pullUser(){\r\n        this.currentUser=Auth.getCurrentUser()\r\n    }\r\n    @action resetUser(){\r\n        this.currentUser=null\r\n    }\r\n}\r\nexport default new UserStore()","import {observable,action} from \"mobx\"\r\nimport {Uploader} from \"../models\"\r\nimport {  message } from 'antd';\r\nclass HistoryStore{\r\n    @observable  list = []\r\n    @observable page=0\r\n    @observable limit =10\r\n    @observable isLoading =false\r\n    @observable hasMore =true\r\n    @action append(newList){\r\n        this.list=this.list.concat(newList)\r\n    }\r\n    @action find(){\r\n        this.isLoading=true\r\n        Uploader.find(this.page,this.limit)\r\n            .then(\r\n                newList=>{\r\n                    this.append(newList)\r\n                    if(newList.length<this.limit){\r\n                        this.hasMore=false\r\n                    }\r\n                })\r\n            .catch(error=>{message.error('加载失败')})\r\n            .finally(()=>{this.isLoading=false})\r\n    }\r\n    @action reset() {\r\n        this.list = [];\r\n        this.page=0\r\n        this.limit=10\r\n        this.isLoading=false\r\n        this.hasMore=true\r\n    }\r\n}\r\nexport default  new HistoryStore()","import {action, observable} from \"mobx\"\r\nimport {Uploader} from \"../models\"\r\n\r\nclass ImageStore {\r\n    @observable fileName = '';\r\n    @observable file = null;\r\n    @observable isUploading = false;\r\n    @observable serverFile =null;\r\n    @action setFileName(fileName) {\r\n        this.fileName = fileName\r\n    }\r\n    @action setFile(file) {\r\n        this.file = file\r\n    }\r\n    @action upload() {\r\n        this.isUploading=true\r\n        this.serverFile=null\r\n        return new Promise((resolve,reject)=>{\r\n            Uploader.add(this.file,this.fileName)\r\n                .then(serverFile=>{\r\n                    this.serverFile=serverFile\r\n                    resolve(serverFile)\r\n                }).catch(error=>{\r\n                console.log('上传失败')\r\n                reject(error)\r\n            }).finally(()=>{\r\n                this.isUploading =false\r\n            })\r\n        })\r\n\r\n    }\r\n    @action reset(){\r\n    this.isUploading = false;\r\n   this.serverFile =null;\r\n    }\r\n}\r\nexport default  new ImageStore()","import {action, observable} from \"mobx\"\r\nimport {Auth} from '../models'\r\nimport UserStore from \"./user\"\r\nimport HistoryStore from \"./history\"\r\nimport ImageStore from'./image'\r\nimport {  message } from 'antd';\r\nclass AuthStore {\r\n    @observable isLogin = false;\r\n    @observable isLoading = false;\r\n    @observable values = {\r\n        username: '',\r\n        password: ''\r\n    }\r\n\r\n    @action setIsLogin(isLogin) {\r\n        this.isLogin = isLogin\r\n    }\r\n\r\n    @action setUsername(username) {\r\n        this.values.username = username\r\n    }\r\n\r\n    @action setPassword(password) {\r\n        this.values.password = password\r\n    }\r\n\r\n    @action login() {\r\n        return new Promise((resolve, reject) => {\r\n            Auth.login(this.values.username, this.values.password)\r\n                .then(user => {\r\n                    message.success(`${this.values.username} 登录成功`)\r\n                    UserStore.pullUser()\r\n                    resolve(user)\r\n                })\r\n                .catch(error => {\r\n                  message.error('登录失败')\r\n                    UserStore.resetUser()\r\n                    reject(error)\r\n                })\r\n        })\r\n    }\r\n\r\n    @action register() {\r\n        return new Promise((resolve, reject) => {\r\n            Auth.register(this.values.username, this.values.password)\r\n                .then(user => {\r\n                  message.success(`注册成功`)\r\n                    UserStore.pullUser()\r\n                    resolve(user)\r\n                })\r\n                .catch(error => {\r\n                    message.error('注册失败')\r\n                    UserStore.resetUser()\r\n                    reject(error)\r\n                })\r\n        })\r\n    }\r\n\r\n    @action logout() {\r\n        Auth.logout()\r\n        HistoryStore.reset()\r\n        ImageStore.reset()\r\n       message.success('注销成功')\r\n        UserStore.resetUser()\r\n    }\r\n}\r\n\r\nexport default  new AuthStore()","import AuthStore from \"./auth\"\r\nimport {createContext, useContext} from \"react\"\r\nimport UserStore from \"./user\"\r\nimport ImageStore from './image'\r\nimport HistoryStore from './history'\r\nconst context=createContext({\r\n        AuthStore,\r\n        UserStore,\r\n        ImageStore,\r\n         HistoryStore\r\n    }\r\n)\r\nconst  useStores=()=>{\r\n   return  useContext(context)\r\n}\r\nexport default  useStores;"],"sourceRoot":""}